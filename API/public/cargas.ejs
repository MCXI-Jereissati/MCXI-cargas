<!DOCTYPE html>
    <!-- Patrícia Albuquerque -->
<html lang="pt-br">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://code.iconify.design/iconify-icon/1.0.7/iconify-icon.min.js"></script>
    <link rel="stylesheet" href="./style/styles.css">
    <link rel="stylesheet" href="./dist/output.css">
    <title>Visualizar Cargas</title>
</head>

<body>
    <div class="lg:hidden flex justify-between w-full items-center text-xl m-4 font-bold">
        <div>
            <img src="./imagens/logo.png" class="w-32">
        </div>
        <button onclick="logout()"
            class="lg:hidden bg-[#000000] text-[#FFFFFF] text-sm font-medium p-2 mr-9 rounded-[10px]">
            <div class="flex">
                <p class="flex text-lg"><iconify-icon icon="material-symbols:logout"></iconify-icon></p>
                <p>Sair</p>
            </div>
        </button>
    </div>
    <div style="display: none" id="mensagem"
        class="fixed grid-cols-12 items-center text-sm z-50 m-0 bg-[#3E3E3E] w-full h-[60px] top-0 border-b border-[#878787]">
        <div class="col-span-1"></div>
        <span id="mensagem-texto" class="content-center mr-6 lg:text-xl col-span-10 text-center"></span>
        <div class="bg-[red] mr-4 w-7 h-7 flex justify-center items-center rounded-lg col-span-1">
            <button id="excluir-mensagem" class="text-white text-xl rotate-45">&#10010;</button>
        </div>
    </div>
    <section class="m-4 lg:grid lg:grid-cols-2 gap-x-8">
        <div class="grid gap-y-6 p-6 mb-6 lg:mb-0 border-[#878787] border-[0.5px] rounded-lg lg:w-full bg-[#3E3E3E]">
            <div class="flex w-full justify-between">
                <div class="hidden lg:block">
                    <img src="./imagens/logo.png" class="w-32">
                </div>
                <button onclick="logout()"
                    class="lg:flex hidden bg-[#000000] text-[#FFFFFF] text-sm font-medium w-min p-2 rounded-[10px] h-min">
                    <p class="flex text-lg"><iconify-icon icon="material-symbols:logout"></iconify-icon></p>
                    <p>Sair</p>
                </button>
            </div>
            <h1 class="text-2xl font-medium">Pesquisar Carga</h1>
            <form id="buscar-carga-form" class="grid gap-y-6">
                <div class="grid gap-y-2">
                    <input class="hidden" type="text" id="parametro1" name="parametro1"
                        placeholder="Código da companhia:" required value="047">
                    <label for="parametro2">ID aéreo:</label>
                    <input class="w-full text-sm p-4 text-black rounded-md h-[53px] border-[#282828] border-[0.6px]"
                        type="text" id="parametro2" name="parametro2" placeholder="00000000" required autofocus>
                </div>
                <div id="busca-salva" class="w-full lg:justify-between">
                    <button
                        class="bg-[#2F2F2F] text-[#FFFFFF] h-[56px] border-[#72BB8B] border rounded-md font-medium w-full lg:w-[48%]"
                        type="submit">Buscar</button>
                    <input
                        class="bg-[#72BB8B] text-[#FFFFFF] lg:mt-0 mt-5 h-[56px] cursor-pointer rounded-md font-medium w-full lg:w-[48%]"
                        type="button" style="display: none;" id="salvar-carga-button" value="Salvar">
                </div>
            </form>
        </div>
        <div id="cargas-nova"
            class="grid lg:p-6 lg:border-[#878787] lg:border-[0.5px] rounded-lg lg:w-full lg:bg-[#3E3E3E]"
            style="display: none; ">
            <div class="grid lg:p-0 p-6 border-[#878787] lg:border-0 border-[0.5px] rounded-lg lg:w-full bg-[#3E3E3E]"
                id="dados-atuais"></div>
            <div id="cargas-nova" class="lg:col-span-2 mt-4 lg:mt-0 lg:gap-x-4">
                <div id="historico"></div>
            </div>
        </div>
    </section>
    <section class="mx-4">
        <div
            class="lg:grid lg:grid-cols-12 lg:gap-4 border  bg-[#282828] lg:bg-transparent lg:border-0 border-[#878787] rounded-lg">
            <div
                class="lg:rounded-lg lg:bg-[#282828] bg-transparent lg:gap-y-0 lg:flex justify-between lg:border border-b lg:mx-0 mx-4 border-[#878787] items-center py-4  lg:p-6 col-span-3">
                <h1 class="text-2xl font-medium lg:block hidden">Cargas em Rota</h1>
                <h1 class="text-2xl font-medium lg:hidden">Cargas em Rota</h1>
                <div class="lg:block flex lg:mt-0 mt-6">
                    <p class="lg:hidden">Total de cargas: </p>
                    <div
                        class="flex lg:justify-center lg:items-center lg:rounded-full lg:bg-[#5C5C5C] lg:w-16 lg:h-16 pl-2 lg:pl-0">
                        <div class="font-bold lg:text-2xl" id="totalcargas"></div>
                    </div>
                </div>
            </div>
            <div
                class="lg:block px-6 py-4 lg:bg-[#3E3E3E] bg-transparent lg:border border-[#878787] rounded-lg lg:col-span-9">
                <div>
                    <h1 class="font-medium mb-2">Cotacão do Dólar</h1>
                    <div class="lg:flex lg:justify-between">
                        <div id="cotacao"></div>
                        <div class="flex text-[#FFFFFF]">
                            <div class="mr-8">Enviar email de <br> atualização da cotação</div>
                            <div class="flex flex-wrap content-center">
                                <label class="switch">
                                    <input type="checkbox" id="salvar-cotacao-checkbox">
                                    <span class="slider"></span>
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="cargas-container" class="pb-12 lg:grid-cols-3 lg:grid lg:gap-x-3"> </div>
    </section>
</body>

<script>
    const TOKEN_KEY = 'token';
    const USER_ID_KEY = 'userId';

    function getToken() {
        return localStorage.getItem(TOKEN_KEY);
    }

    function isLoggedIn() {
        return getToken() !== null;
    }

    function logout() {
        localStorage.removeItem(TOKEN_KEY);
        localStorage.removeItem(USER_ID_KEY);
        window.location.href = '/';
    }

    if (!isLoggedIn()) {
        window.location.href = '/';
    }

    var token = getToken();


    fetch('/pagina-cargas', {
        method: 'GET',
        headers: {
            'Authorization': 'Bearer ' + token
        }
    })
        .then(response => response.json())
        .then(data => {
            const cargasContainer = document.getElementById('cargas-container');
            data.forEach(carga => {
                cargasContainer.innerHTML += `
            <div class="card border border-[#878787] bg-[#282828] my-4 py-3 rounded-lg lg:gap-x-3 px-4 lg:px-0">
                <div class="flex justify-between lg:mx-3 border-b border-[#E0E0E0] shadow-sm lg:px-4 py-2 text-lg font-semibold">
                    <p>Código Aéreo: <span class="ml-1">${carga.numcodigoaereo}</span></p>                    
                    <button class="hidden lg:flex items-center bg-[#3E3E3E] delete-button text-end" data-carga-id="${carga.numcodigoaereo}">&#128465;</button>
                </div>
                <div class="flex lg:px-4 py-2">
                    <p>Status: <span class="font-bold text-[#72BB8B]">${carga.statusatual}</span></p>
                </div>
                <div class="flex lg:px-4 py-2">
                    <p>Origem: <span class="font-bold">${carga.partida}</span></p>
                </div>
                <div class="flex lg:px-4 py-2">
                    <p>Destino: <span class="font-bold">${carga.chegada}</span></p>
                </div>
                <div class="flex lg:px-4 py-2">
                    <p>Voo: <span class="font-bold">${carga.flight}</span></p>
                </div>
                <div class="flex lg:px-4 py-2">
                    <p>Peso: <span class="font-bold">${carga.weight}</span></p>
                </div>
                <div class="flex lg:px-4 pt-2">
                    <p>Reserva: <span class="font-bold">${carga.reservation}</span></p>
                </div>
                <button class="lg:hidden text-[#282828] flex flex-wrap content-center bg-[#FF7272] delete-button w-full mb-4 h-14 rounded-md mt-6 font-medium text-base" data-carga-id="${carga.numcodigoaereo}">Excluir carga</button>
            </div>
        `;
            });

            const deleteButtons = document.querySelectorAll('.delete-button');
            deleteButtons.forEach(deleteButton => {
                deleteButton?.addEventListener('click', () => {
                    const cargaId = deleteButton.dataset.cargaId;
                    const confirmDelete = confirm('Tem certeza que deseja excluir esta carga?');

                    if (confirmDelete) {
                        fetch(`/pagina-cargas/${cargaId}`, {
                            method: 'DELETE',
                            headers: {
                                'Authorization': 'Bearer ' + token
                            }
                        })
                            .then(response => {
                                if (response.ok) {
                                    const cardElement = deleteButton.closest('.card');
                                    if (cardElement) {
                                        cardElement.remove();
                                    } else {
                                        console.error('Elemento "card" não encontrado.');
                                    }
                                } else {
                                    console.error('Erro ao excluir carga:', response.statusText);
                                }
                            })
                            .catch(error => {
                                console.error('Erro ao excluir carga:', error);
                            });
                    }
                });
            });
        })
        .catch(error => console.error('Erro ao obter cargas:', error));

    document.getElementById('buscar-carga-form')?.addEventListener('submit', function (event) {
        event.preventDefault();

        const parametro1 = document.getElementById('parametro1').value;
        const parametro2 = document.getElementById('parametro2').value;

        fetch('/busca', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + token
            },
            body: JSON.stringify({ parametro1, parametro2 })
        })
            .then(response => response.json())
            .then(busca => {
                const dadosAtuaisDiv = document.getElementById('dados-atuais');
                const historicoDiv = document.getElementById('historico');

                dadosAtuaisDiv.innerHTML = '';
                historicoDiv.innerHTML = '';

                Object.keys(busca.DadosAtuais).forEach(key => {
                    if (key === 'state') {
                        dadosAtuaisDiv.innerHTML += `
                            <div>
                                <h1 class="text-2xl font-medium mb-6">Descrição</h1>
                            </div>
                            <div class="grid gap-y-2 pb-2">
                                <p>Código aéreo: <span class="font-bold">${parametro1}-${parametro2}</span></p>
                                <div class="flex">
                                    <p class="pr-1">Status:<span class="ml-1 font-bold text-[#72BB8B]">${busca.DadosAtuais[key]}</span></p>
                                </div>
                            </div>
                `;
                    } else {
                        dadosAtuaisDiv.innerHTML += `
                        <div class="lg:flex pb-2 lg:pb-0">
                            <p class="capitalize pr-1 lg:pb-2">${key}:</p>
                            <p class="font-bold lg:pb-2"> ${busca.DadosAtuais[key]}</p>
                        </div>
                `;
                    }
                });

                historicoDiv.innerHTML += ``;
                busca.Historico.forEach(item => {
                    let historicoItemHTML = `<div class="mb-4 toggle-container" style="position: relative;">`;
                    let flightValue;

                    Object.keys(item).forEach(key => {
                        historicoItemHTML += `<p class="hidden">${key}: ${item[key]}</p>`;

                        if (key === "Flight") {
                            flightValue = item[key];
                        }
                    });
                    historicoItemHTML += `<button class="flex toggleButton cursor-pointer text-white h-[56px] w-full rounded-md p-4 bg-[#3E3E3E] lg:bg-transparent lg:border-2 border-[#282828] justify-between">
                        <p>${flightValue}</p>
                        <div>
                            <span id="oi" class="rotate-90 text-2xl w-8 h-6" style="display: block;">></span>
                            <span id="tchau" class="-rotate-90 text-2xl w-8 h-6" style="display: none;">></span>
                        </div>
                    </button>`;

                    historicoItemHTML += `<div class="content-${busca.Historico.indexOf(item)} cursor-text text-black"  style="display: none; position: absolute; width: 100%; background-color: #EEEEEE; z-index: 999;">`;
                    Object.keys(item).forEach(key => {
                        historicoItemHTML += `
                        <div class="mx-4 grid grid-cols-2 border-b border-[#30363d] cursor-text">
                            <p class="py-2 px-4 cursor-text">${key}</p> 
                            <p class="py-2 px-4 cursor-text">${item[key]}</p>
                        </div>`;
                    });
                    historicoItemHTML += "</div>";
                    historicoItemHTML += "</div>";
                    historicoDiv.innerHTML += historicoItemHTML;
                });

                document.querySelectorAll('.toggleButton').forEach(button => {
                    button?.addEventListener('click', function () {
                        const content = this.nextElementSibling;
                        const oiSpan = this.querySelector('#oi');
                        const tchauSpan = this.querySelector('#tchau');

                        if (content.style.display === 'none') {
                            content.style.display = 'block';
                            oiSpan.style.display = 'none';
                            tchauSpan.style.display = 'block';
                        } else {
                            content.style.display = 'none';
                            oiSpan.style.display = 'block';
                            tchauSpan.style.display = 'none';
                        }
                    });
                });

                document.getElementById('cargas-nova').style.display = 'grid';
                document.getElementById('salvar-carga-button').style.display = 'block';
                function adjustDisplay() {
                    var element = document.getElementById('busca-salva');
                    if (window.innerWidth <= 768) {
                        element.style.display = 'block';
                    } else {
                        element.style.display = 'flex';
                    }
                }
                if (busca.salvarNoBanco) {
                    document.getElementById('salvar-carga-button').style.display = 'block';
                }
            })
            .catch(error => console.error('Erro na nova busca:', error));
    });

    document.getElementById('excluir-mensagem')?.addEventListener('click', function () {
        document.getElementById('mensagem-texto').innerText = '';
        document.getElementById('mensagem').style.display = 'none';
        document.getElementById('mensagem').classList.remove('opacity-100');
        document.getElementById('mensagem').classList.add('opacity-0');
    });

    function atualizarCargasSalvas() {
        fetch('/pagina-cargas', {
            method: 'GET',
            headers: {
                'Authorization': 'Bearer ' + token
            }
        })
            .then(response => response.json())
            .then(data => {
                const cargasContainer = document.getElementById('cargas-container');
                cargasContainer.innerHTML = '';
                data.forEach(carga => {
                    cargasContainer.innerHTML += `
                    <div class="card border border-[#878787] bg-[#282828] my-4 py-3 rounded-lg lg:gap-x-3 px-4 lg:px-0">
                        <div class="flex justify-between lg:mx-3 border-b border-[#E0E0E0] shadow-sm lg:px-4 py-2 text-lg font-semibold">
                            <p>Código Aéreo: <span class="ml-1">${carga.numcodigoaereo}</span></p>                    
                            <button class="hidden lg:flex items-center bg-[#3E3E3E] delete-button text-end" data-carga-id="${carga.numcodigoaereo}">&#128465;</button>
                        </div>
                        <div class="flex lg:px-4 py-2">
                            <p>Status: <span class="font-bold text-[#72BB8B]">${carga.statusatual}</span></p>
                        </div>
                        <div class="flex lg:px-4 py-2">
                            <p>Origem: <span class="font-bold">${carga.partida}</span></p>
                        </div>
                        <div class="flex lg:px-4 py-2">
                            <p>Destino: <span class="font-bold">${carga.chegada}</span></p>
                        </div>
                        <div class="flex lg:px-4 py-2">
                            <p>Voo: <span class="font-bold">${carga.flight}</span></p>
                        </div>
                        <div class="flex lg:px-4 py-2">
                            <p>Peso: <span class="font-bold">${carga.weight}</span></p>
                        </div>
                        <div class="flex lg:px-4 pt-2">
                            <p>Reserva: <span class="font-bold">${carga.reservation}</span></p>
                        </div>
                        <button class="lg:hidden text-[#282828] flex flex-wrap content-center bg-[#FF7272] delete-button w-full mb-4 h-14 rounded-md mt-6 font-medium text-base" data-carga-id="${carga.numcodigoaereo}">Excluir carga</button>
                    </div>
            `;
                });

                const deleteButtons = document.querySelectorAll('.delete-button');
                deleteButtons.forEach(deleteButton => {
                    deleteButton?.addEventListener('click', () => {
                        const cargaId = deleteButton.dataset.cargaId;
                        const confirmDelete = confirm('Tem certeza que deseja excluir esta carga?');

                        if (confirmDelete) {
                            fetch(`/pagina-cargas/${cargaId}`, {
                                method: 'DELETE',
                                headers: {
                                    'Authorization': 'Bearer ' + token
                                }
                            })
                                .then(response => {
                                    if (response.ok) {
                                        const cardElement = deleteButton.closest('.card');
                                        if (cardElement) {
                                            cardElement.remove();
                                        } else {
                                            console.error('Elemento "card" não encontrado.');
                                        }
                                    } else {
                                        console.error('Erro ao excluir carga:', response.statusText);
                                    }
                                })
                                .catch(error => {
                                    console.error('Erro ao excluir carga:', error);
                                });
                        }
                    });
                });
            })
            .catch(error => console.error('Erro ao obter cargas:', error));
    }

    async function totalCargas() {
        try {
            const response = await fetch('/pagina-cargas', {
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + token
                }
            });
            const totalCargas = await response.json();

            if (Array.isArray(totalCargas)) {
                const numRegistros = totalCargas.length;

                const numRegistrosFormatado = String(numRegistros).padStart(2, '0');

                const divTotalCargas = document.getElementById('totalcargas');
                divTotalCargas.textContent = numRegistrosFormatado;
            } else {
                console.error("Erro: A resposta não contém um array.");
            }

        } catch (error) {
            console.error('Erro ao buscar total das cargas:', error);
            const divTotalCargas = document.getElementById('totalcargas');
            divTotalCargas.textContent = "Erro ao buscar total das cargas.";
        }
    }

    document.getElementById('salvar-carga-button')?.addEventListener('click', function () {
        const parametro1 = document.getElementById('parametro1').value;
        const parametro2 = document.getElementById('parametro2').value;

        fetch('/busca', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + token
            },
            body: JSON.stringify({ parametro1, parametro2, salvarNoBanco: true })
        })
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Erro ao salvar carga');
                }
            })
            .then(data => {
                atualizarCargasSalvas();

                document.getElementById('parametro2').value = '';

                document.getElementById('cargas-nova').style.display = 'block';
                document.getElementById('salvar-carga-button').style.display = 'none';

                document.getElementById('mensagem-texto').classList.remove('green-text', 'red-text');
                document.getElementById('mensagem-texto').innerText = 'Carga salva com sucesso!';
                document.getElementById('mensagem-texto').classList.add('green-text');
                document.getElementById('mensagem').style.display = 'grid';
                document.getElementById('mensagem').classList.remove('opacity-0');
                document.getElementById('mensagem').classList.add('opacity-100');

                setTimeout(() => {
                    document.getElementById('mensagem-texto').innerText = '';
                    document.getElementById('mensagem').classList.remove('opacity-100');
                    document.getElementById('mensagem').classList.add('opacity-0');
                }, 10000);
            })
            .catch(error => {
                console.error('Erro ao salvar carga:', error);
                document.getElementById('mensagem-texto').classList.remove('green-text', 'red-text');

                document.getElementById('mensagem-texto').innerText = 'Os dados já foram salvos anteriormente';
                document.getElementById('mensagem-texto').classList.add('red-text');
                document.getElementById('mensagem').style.display = 'grid';
                document.getElementById('mensagem').classList.remove('opacity-0');
                document.getElementById('mensagem').classList.add('opacity-100');
                setTimeout(() => {
                    document.getElementById('mensagem-texto').innerText = '';
                    document.getElementById('mensagem').classList.remove('opacity-100');
                    document.getElementById('mensagem').classList.add('opacity-0');
                }, 10000);
            });
    });

    document.getElementById('toggleButton')?.addEventListener('click', function () {
        var div = document.getElementById('content');
        if (div.style.display === 'none') {
            div.style.display = 'block';
        } else {
            div.style.display = 'none';
        }
    });

    async function buscarTodasCotacoes() {
        try {
            const response = await fetch('/todas-cotacoes', {
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + token
                }
            });
            const todasCotacoes = await response.json();

            const checkbox = document.getElementById('salvar-cotacao-checkbox');

            if (todasCotacoes.some(cotacao => cotacao.enviaremail === true)) {
                checkbox.checked = true;
            } else {
                checkbox.checked = false;
            }

        } catch (error) {
            console.error('Erro ao buscar todas as cotações:', error);
        }
    }

    document.getElementById('salvar-cotacao-checkbox')?.addEventListener('click', async function () {
        const enviarEmail = this.checked;
        try {
            const response = await fetch('/busca-cotacao', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + token
                },
                body: JSON.stringify({ salvarNoBanco: true, enviarEmail })
            });

            if (!response.ok) {
                throw new Error('Erro ao salvar cotação.');
            }

            console.log('Cotação salva com sucesso.');
        } catch (error) {
            console.error(error);
            this.checked = false;
        }
    });

    async function cotacaoAtualizada() {
        try {
            const response = await fetch('/busca-cotacao', {
                method: 'POST',
                headers: {
                    'Authorization': 'Bearer ' + token
                }
            });
            const Cotacao = await response.json();

            const divCotation = document.getElementById('cotacao');

            if (!divCotation) {
                console.error('Elemento com ID "cotacao" não encontrado.');
                return;
            }

            function formatarDataHora(dataHora) {
                const data = new Date(dataHora);
                const dia = String(data.getDate()).padStart(2, '0');
                const mes = String(data.getMonth() + 1).padStart(2, '0');
                const ano = data.getFullYear();
                const hora = String(data.getHours()).padStart(2, '0');
                const minutos = String(data.getMinutes()).padStart(2, '0');
                return `${dia}/${mes}/${ano} ${hora}:${minutos}`;
            }

            let cotacaoHTML = '';
            if (Cotacao.atual && Cotacao.atual.value && Cotacao.atual.value.length > 0) {
                const cotacaoCompra = Cotacao.atual.value[0].cotacaoCompra;
                const cotacaoVenda = Cotacao.atual.value[0].cotacaoVenda;
                const dataHoraCotacao = formatarDataHora(Cotacao.atual.value[0].dataHoraCotacao);

                cotacaoHTML = `                        
                <div class="lg:flex lg:gap-x-12 grid gap-y-2 text-[#FFFFFF]">
                    <div class="lg:block flex">
                        <div>Valor de compra: </div>
                        <div class="font-bold ml-1 lg:ml-0">${cotacaoCompra.toFixed(4).replace('.', ',')}</div>
                    </div>
                    <div class="lg:block flex">
                        <div>Valor de venda(PTAX): </div>
                        <div class="font-bold ml-1 lg:ml-0">${cotacaoVenda.toFixed(4).replace('.', ',')}</div>
                    </div>
                    <div class="lg:block flex mb-2">
                        <div>Data de atualização: </div>
                        <div class="font-bold text-[#72BB8B] ml-1 lg:ml-0">${dataHoraCotacao}</div>
                    </div>
                </div>`;
            } else if (Cotacao.anterior && Cotacao.anterior.value && Cotacao.anterior.value.length > 0) {
                const cotacaoCompra = Cotacao.anterior.value[0].cotacaoCompra;
                const cotacaoVenda = Cotacao.anterior.value[0].cotacaoVenda;
                const dataHoraCotacao = formatarDataHora(Cotacao.anterior.value[0].dataHoraCotacao);

                cotacaoHTML = `
                <div class="lg:flex lg:gap-x-12 grid gap-y-2 text-[#FFFFFF]">
                    <div class="lg:block flex">
                        <div>Valor de compra: </div>
                        <div class="font-bold ml-1 lg:ml-0">${cotacaoCompra.toFixed(4).replace('.', ',')}</div>
                    </div>
                    <div class="lg:block flex">
                        <div>Valor de venda(PTAX): </div>
                        <div class="font-bold ml-1 lg:ml-0">${cotacaoVenda.toFixed(4).replace('.', ',')}</div>
                    </div>
                    <div class="lg:block flex">
                        <div>Data de atualização: </div>
                        <div class="font-bold ml-1 lg:ml-0">${dataHoraCotacao}</div>
                    </div>
                </div>`;
            } else {
                console.log('Nenhuma cotação disponível');
            }

            divCotation.innerHTML = cotacaoHTML;

        } catch (error) {
            console.error('Erro ao buscar cotações:', error);
        }
    }
    
    totalCargas();
    cotacaoAtualizada();
    buscarTodasCotacoes();

    setInterval(cotacaoAtualizada, 60000);
</script>

</html>
